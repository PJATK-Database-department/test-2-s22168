// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test2.Models;

#nullable disable

namespace Test2.Migrations
{
    [DbContext(typeof(test_dbContext))]
    partial class test_dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FlightPassenger", b =>
                {
                    b.Property<int>("IdFlight")
                        .HasColumnType("int");

                    b.Property<int>("IdPassenger")
                        .HasColumnType("int");

                    b.HasKey("IdFlight", "IdPassenger")
                        .HasName("Flight_Passenger_pk");

                    b.HasIndex("IdPassenger");

                    b.ToTable("Flight_Passenger", (string)null);
                });

            modelBuilder.Entity("Test2.Models.CityDict", b =>
                {
                    b.Property<int>("IdCityDict")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdCityDict")
                        .HasName("CityDict_pk");

                    b.ToTable("CityDict", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Flight", b =>
                {
                    b.Property<int>("IdFlight")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCityDict")
                        .HasColumnType("int");

                    b.Property<int>("IdPlane")
                        .HasColumnType("int");

                    b.HasKey("IdFlight")
                        .HasName("Flight_pk");

                    b.HasIndex("IdCityDict");

                    b.HasIndex("IdPlane");

                    b.ToTable("Flight", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Passenger", b =>
                {
                    b.Property<int>("IdPassenger")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PassportNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPassenger")
                        .HasName("Passenger_pk");

                    b.ToTable("Passenger", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Plane", b =>
                {
                    b.Property<int>("IdPlane")
                        .HasColumnType("int");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPlane")
                        .HasName("Plane_pk");

                    b.ToTable("Plane", (string)null);
                });

            modelBuilder.Entity("FlightPassenger", b =>
                {
                    b.HasOne("Test2.Models.Flight", null)
                        .WithMany()
                        .HasForeignKey("IdFlight")
                        .IsRequired()
                        .HasConstraintName("Table_4_Flight");

                    b.HasOne("Test2.Models.Passenger", null)
                        .WithMany()
                        .HasForeignKey("IdPassenger")
                        .IsRequired()
                        .HasConstraintName("Table_4_Passenger");
                });

            modelBuilder.Entity("Test2.Models.Flight", b =>
                {
                    b.HasOne("Test2.Models.CityDict", "IdCityDictNavigation")
                        .WithMany("Flights")
                        .HasForeignKey("IdCityDict")
                        .IsRequired()
                        .HasConstraintName("Flight_CityDict");

                    b.HasOne("Test2.Models.Plane", "IdPlaneNavigation")
                        .WithMany("Flights")
                        .HasForeignKey("IdPlane")
                        .IsRequired()
                        .HasConstraintName("Flight_Plane");

                    b.Navigation("IdCityDictNavigation");

                    b.Navigation("IdPlaneNavigation");
                });

            modelBuilder.Entity("Test2.Models.CityDict", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Test2.Models.Plane", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
